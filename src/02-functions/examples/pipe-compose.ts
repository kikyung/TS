/**
 * PipeÏôÄ Compose Ìï®Ïàò ÏòàÏ†ú
 * 
 * Ìï®ÏàòÌòï ÌîÑÎ°úÍ∑∏ÎûòÎ∞çÏóêÏÑú Ìï®Ïàò Ï°∞Ìï©ÏùÑ ÏúÑÌïú pipeÏôÄ compose Ìï®ÏàòÎ•º ÌïôÏäµÌï©ÎãàÎã§.
 */

// 1. Í∏∞Î≥∏ Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const add = (a: number) => (b: number): number => a + b;
const multiply = (a: number) => (b: number): number => a * b;
const subtract = (a: number) => (b: number): number => b - a;
const divide = (a: number) => (b: number): number => b / a;

const toUpperCase = (str: string): string => str.toUpperCase();
const addExclamation = (str: string): string => str + '!';
const addQuestion = (str: string): string => str + '?';
const reverse = (str: string): string => str.split('').reverse().join('');

const isEven = (num: number): boolean => num % 2 === 0;
const square = (num: number): number => num * num;
const double = (num: number): number => num * 2;

console.log("=== Í∏∞Î≥∏ Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§ ===");
console.log("add(5)(3):", add(5)(3));
console.log("multiply(4)(6):", multiply(4)(6));
console.log("toUpperCase('hello'):", toUpperCase('hello'));
console.log("isEven(8):", isEven(8));
console.log();

// 2. Pipe Ìï®Ïàò Íµ¨ÌòÑ (ÏôºÏ™ΩÏóêÏÑú Ïò§Î•∏Ï™ΩÏúºÎ°ú Ïã§Ìñâ)
type PipeFunction<T, R> = (arg: T) => R;

function pipe<T>(value: T): T;
function pipe<T, A>(value: T, fn1: PipeFunction<T, A>): A;
function pipe<T, A, B>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>): B;
function pipe<T, A, B, C>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>, fn3: PipeFunction<B, C>): C;
function pipe<T, A, B, C, D>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>, fn3: PipeFunction<B, C>, fn4: PipeFunction<C, D>): D;
function pipe<T, A, B, C, D, E>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>, fn3: PipeFunction<B, C>, fn4: PipeFunction<C, D>, fn5: PipeFunction<D, E>): E;
function pipe<T, A, B, C, D, E, F>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>, fn3: PipeFunction<B, C>, fn4: PipeFunction<C, D>, fn5: PipeFunction<D, E>, fn6: PipeFunction<E, F>): F;
function pipe<T, A, B, C, D, E, F, G>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>, fn3: PipeFunction<B, C>, fn4: PipeFunction<C, D>, fn5: PipeFunction<D, E>, fn6: PipeFunction<E, F>, fn7: PipeFunction<F, G>): G;
function pipe<T, A, B, C, D, E, F, G, H>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>, fn3: PipeFunction<B, C>, fn4: PipeFunction<C, D>, fn5: PipeFunction<D, E>, fn6: PipeFunction<E, F>, fn7: PipeFunction<F, G>, fn8: PipeFunction<G, H>): H;
function pipe<T, A, B, C, D, E, F, G, H, I>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>, fn3: PipeFunction<B, C>, fn4: PipeFunction<C, D>, fn5: PipeFunction<D, E>, fn6: PipeFunction<E, F>, fn7: PipeFunction<F, G>, fn8: PipeFunction<G, H>, fn9: PipeFunction<H, I>): I;
function pipe<T, A, B, C, D, E, F, G, H, I, J>(value: T, fn1: PipeFunction<T, A>, fn2: PipeFunction<A, B>, fn3: PipeFunction<B, C>, fn4: PipeFunction<C, D>, fn5: PipeFunction<D, E>, fn6: PipeFunction<E, F>, fn7: PipeFunction<F, G>, fn8: PipeFunction<G, H>, fn9: PipeFunction<H, I>, fn10: PipeFunction<I, J>): J;
function pipe(value: any, ...fns: Array<(arg: any) => any>): any {
  return fns.reduce((acc, fn) => fn(acc), value);
}

// 3. Compose Ìï®Ïàò Íµ¨ÌòÑ (Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú Ïã§Ìñâ)
type ComposeFunction<T, R> = (arg: T) => R;

function compose<T>(value: T): T;
function compose<T, A>(fn1: ComposeFunction<T, A>): ComposeFunction<T, A>;
function compose<T, A, B>(fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, B>;
function compose<T, A, B, C>(fn3: ComposeFunction<B, C>, fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, C>;
function compose<T, A, B, C, D>(fn4: ComposeFunction<C, D>, fn3: ComposeFunction<B, C>, fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, D>;
function compose<T, A, B, C, D, E>(fn5: ComposeFunction<D, E>, fn4: ComposeFunction<C, D>, fn3: ComposeFunction<B, C>, fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, E>;
function compose<T, A, B, C, D, E, F>(fn6: ComposeFunction<E, F>, fn5: ComposeFunction<D, E>, fn4: ComposeFunction<C, D>, fn3: ComposeFunction<B, C>, fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, F>;
function compose<T, A, B, C, D, E, F, G>(fn7: ComposeFunction<F, G>, fn6: ComposeFunction<E, F>, fn5: ComposeFunction<D, E>, fn4: ComposeFunction<C, D>, fn3: ComposeFunction<B, C>, fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, G>;
function compose<T, A, B, C, D, E, F, G, H>(fn8: ComposeFunction<G, H>, fn7: ComposeFunction<F, G>, fn6: ComposeFunction<E, F>, fn5: ComposeFunction<D, E>, fn4: ComposeFunction<C, D>, fn3: ComposeFunction<B, C>, fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, H>;
function compose<T, A, B, C, D, E, F, G, H, I>(fn9: ComposeFunction<H, I>, fn8: ComposeFunction<G, H>, fn7: ComposeFunction<F, G>, fn6: ComposeFunction<E, F>, fn5: ComposeFunction<D, E>, fn4: ComposeFunction<C, D>, fn3: ComposeFunction<B, C>, fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, I>;
function compose<T, A, B, C, D, E, F, G, H, I, J>(fn10: ComposeFunction<I, J>, fn9: ComposeFunction<H, I>, fn8: ComposeFunction<G, H>, fn7: ComposeFunction<F, G>, fn6: ComposeFunction<E, F>, fn5: ComposeFunction<D, E>, fn4: ComposeFunction<C, D>, fn3: ComposeFunction<B, C>, fn2: ComposeFunction<A, B>, fn1: ComposeFunction<T, A>): ComposeFunction<T, J>;
function compose(...fns: Array<(arg: any) => any>): (arg: any) => any {
  return (value: any) => fns.reduceRight((acc, fn) => fn(acc), value);
}

console.log("=== Pipe Ìï®Ïàò ÏòàÏ†ú ===");

// Ïà´Ïûê Í≥ÑÏÇ∞ ÏòàÏ†ú
const result1 = pipe(
  5,
  add(3),        // 5 + 3 = 8
  multiply(2),   // 8 * 2 = 16
  square,        // 16 * 16 = 256
  double         // 256 * 2 = 512
);
console.log("pipe(5, add(3), multiply(2), square, double):", result1);

// Î¨∏ÏûêÏó¥ Ï≤òÎ¶¨ ÏòàÏ†ú
const result2 = pipe(
  "hello world",
  toUpperCase,      // "HELLO WORLD"
  addExclamation,   // "HELLO WORLD!"
  reverse           // "!DLROW OLLEH"
);
console.log("pipe('hello world', toUpperCase, addExclamation, reverse):", result2);

// Ï°∞Í±¥Î∂Ä Ï≤òÎ¶¨ ÏòàÏ†ú
const processNumber = (num: number) => pipe(
  num,
  double,           // 2Î∞∞
  square,           // Ï†úÍ≥±
  (n: number) => isEven(n) ? n : n + 1  // ÏßùÏàòÍ∞Ä ÏïÑÎãàÎ©¥ 1 ÎçîÌïòÍ∏∞
);

console.log("processNumber(3):", processNumber(3)); // 3 -> 6 -> 36 -> 37
console.log("processNumber(4):", processNumber(4)); // 4 -> 8 -> 64 -> 64

console.log();

console.log("=== Compose Ìï®Ïàò ÏòàÏ†ú ===");

// ComposeÎ°ú Í∞ôÏùÄ Í≥ÑÏÇ∞ÏùÑ Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú Ïã§Ìñâ
const composedCalculation = compose(
  double,         // ÎßàÏßÄÎßâÏóê Ïã§Ìñâ
  square,         // Í∑∏ Îã§Ïùå
  multiply(2),    // Í∑∏ Îã§Ïùå
  add(3)          // Ï≤´ Î≤àÏß∏Î°ú Ïã§Ìñâ
);

const result3 = composedCalculation(5);
console.log("compose(double, square, multiply(2), add(3))(5):", result3);

// ComposeÎ°ú Î¨∏ÏûêÏó¥ Ï≤òÎ¶¨
const composedString = compose(
  reverse,           // ÎßàÏßÄÎßâÏóê Ïã§Ìñâ
  addExclamation,    // Í∑∏ Îã§Ïùå
  toUpperCase        // Ï≤´ Î≤àÏß∏Î°ú Ïã§Ìñâ
);

const result4 = composedString("hello world");
console.log("compose(reverse, addExclamation, toUpperCase)('hello world'):", result4);

console.log();

// 4. Í≥†Í∏â PipeÏôÄ Compose ÏòàÏ†ú
interface User {
  id: number;
  name: string;
  email: string;
  age: number;
  isActive: boolean;
}

const users: User[] = [
  { id: 1, name: "ÌôçÍ∏∏Îèô", email: "hong@example.com", age: 25, isActive: true },
  { id: 2, name: "ÍπÄÏ≤†Ïàò", email: "kim@example.com", age: 30, isActive: false },
  { id: 3, name: "Ïù¥ÏòÅÌù¨", email: "lee@example.com", age: 28, isActive: true },
  { id: 4, name: "Î∞ïÎØºÏàò", email: "park@example.com", age: 35, isActive: true },
  { id: 5, name: "Ï†ïÏàòÏßÑ", email: "jung@example.com", age: 22, isActive: false }
];

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const filterActive = (users: User[]): User[] => users.filter(user => user.isActive);
const filterByAge = (minAge: number) => (users: User[]): User[] => 
  users.filter(user => user.age >= minAge);
const sortByName = (users: User[]): User[] => 
  [...users].sort((a, b) => a.name.localeCompare(b.name));
const mapToNames = (users: User[]): string[] => users.map(user => user.name);
const addPrefix = (prefix: string) => (names: string[]): string[] => 
  names.map(name => `${prefix} ${name}`);

console.log("=== Í≥†Í∏â Pipe ÏòàÏ†ú (ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨) ===");

// ÌôúÏÑ± ÏÇ¨Ïö©Ïûê Ï§ë 25ÏÑ∏ Ïù¥ÏÉÅÏù∏ ÏÇ¨Ïö©ÏûêÎì§Ïùò Ïù¥Î¶ÑÏùÑ Ï†ïÎ†¨ÌïòÍ≥† Ï†ëÎëêÏÇ¨ Ï∂îÍ∞Ä
const activeUsersOver25 = pipe(
  users,
  filterActive,           // ÌôúÏÑ± ÏÇ¨Ïö©ÏûêÎßå ÌïÑÌÑ∞ÎßÅ
  filterByAge(25),        // 25ÏÑ∏ Ïù¥ÏÉÅ ÌïÑÌÑ∞ÎßÅ
  sortByName,             // Ïù¥Î¶ÑÏúºÎ°ú Ï†ïÎ†¨
  mapToNames,             // Ïù¥Î¶ÑÎßå Ï∂îÏ∂ú
  addPrefix("üë§")         // Ï†ëÎëêÏÇ¨ Ï∂îÍ∞Ä
);

console.log("ÌôúÏÑ± ÏÇ¨Ïö©Ïûê Ï§ë 25ÏÑ∏ Ïù¥ÏÉÅ (Ï†ïÎ†¨Îêú Ïù¥Î¶Ñ):", activeUsersOver25);

// ComposeÎ°ú Í∞ôÏùÄ ÏûëÏóÖÏùÑ Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú Ïã§Ìñâ
const composedUserProcessing = compose(
  addPrefix("üë§"),        // ÎßàÏßÄÎßâÏóê Ïã§Ìñâ
  mapToNames,             // Í∑∏ Îã§Ïùå
  sortByName,             // Í∑∏ Îã§Ïùå
  filterByAge(25),        // Í∑∏ Îã§Ïùå
  filterActive             // Ï≤´ Î≤àÏß∏Î°ú Ïã§Ìñâ
);

const result5 = composedUserProcessing(users);
console.log("composeÎ°ú Ï≤òÎ¶¨Ìïú Í≤∞Í≥º:", result5);

console.log();

// 5. ÎπÑÎèôÍ∏∞ Pipe ÏòàÏ†ú
const delay = (ms: number) => (value: any) => 
  new Promise(resolve => setTimeout(() => resolve(value), ms));

const asyncAdd = (a: number) => async (b: number): Promise<number> => {
  await delay(100);
  return a + b;
};

const asyncMultiply = (a: number) => async (b: number): Promise<number> => {
  await delay(100);
  return a * b;
};

const asyncSquare = async (num: number): Promise<number> => {
  await delay(100);
  return num * num;
};

// ÎπÑÎèôÍ∏∞ Pipe Ìï®Ïàò
async function asyncPipe<T>(value: T): Promise<T>;
async function asyncPipe<T, A>(value: T, fn1: (arg: T) => Promise<A>): Promise<A>;
async function asyncPipe<T, A, B>(value: T, fn1: (arg: T) => Promise<A>, fn2: (arg: A) => Promise<B>): Promise<B>;
async function asyncPipe<T, A, B, C>(value: T, fn1: (arg: T) => Promise<A>, fn2: (arg: A) => Promise<B>, fn3: (arg: B) => Promise<C>): Promise<C>;
async function asyncPipe<T, A, B, C, D>(value: T, fn1: (arg: T) => Promise<A>, fn2: (arg: A) => Promise<B>, fn3: (arg: B) => Promise<C>, fn4: (arg: C) => Promise<D>): Promise<D>;
async function asyncPipe(value: any, ...fns: Array<(arg: any) => Promise<any>>): Promise<any> {
  return fns.reduce(async (acc, fn) => fn(await acc), Promise.resolve(value));
}

console.log("=== ÎπÑÎèôÍ∏∞ Pipe ÏòàÏ†ú ===");

const asyncResult = await asyncPipe(
  3,
  asyncAdd(2),      // 3 + 2 = 5
  asyncMultiply(3), // 5 * 3 = 15
  asyncSquare       // 15 * 15 = 225
);

console.log("ÎπÑÎèôÍ∏∞ pipe Í≤∞Í≥º:", asyncResult);

console.log();

// 6. ÏóêÎü¨ Ï≤òÎ¶¨Í∞Ä Ìè¨Ìï®Îêú Pipe
const safeDivide = (divisor: number) => (dividend: number): number => {
  if (divisor === 0) {
    throw new Error("0ÏúºÎ°ú ÎÇòÎàå Ïàò ÏóÜÏäµÎãàÎã§");
  }
  return dividend / divisor;
};

const safeSquare = (num: number): number => {
  if (num < 0) {
    throw new Error("ÏùåÏàòÎäî Ï†úÍ≥±Ìï† Ïàò ÏóÜÏäµÎãàÎã§");
  }
  return num * num;
};

const withErrorHandling = <T>(fn: (arg: T) => T) => (arg: T): T | string => {
  try {
    return fn(arg);
  } catch (error) {
    return `ÏóêÎü¨: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî ÏóêÎü¨'}`;
  }
};

console.log("=== ÏóêÎü¨ Ï≤òÎ¶¨Í∞Ä Ìè¨Ìï®Îêú Pipe ÏòàÏ†ú ===");

const safeResult1 = pipe(
  10,
  withErrorHandling(safeDivide(2)),  // 10 / 2 = 5
  withErrorHandling(safeSquare)      // 5 * 5 = 25
);
console.log("ÏïàÏ†ÑÌïú Í≥ÑÏÇ∞:", safeResult1);

const safeResult2 = pipe(
  10,
  withErrorHandling(safeDivide(0)),  // ÏóêÎü¨ Î∞úÏÉù
  withErrorHandling(safeSquare)
);
console.log("ÏóêÎü¨ Ï≤òÎ¶¨:", safeResult2);

const safeResult3 = pipe(
  -5,
  withErrorHandling(safeSquare),     // ÏóêÎü¨ Î∞úÏÉù
  withErrorHandling(safeDivide(2))
);
console.log("ÏóêÎü¨ Ï≤òÎ¶¨:", safeResult3);

console.log();

// 7. Ïã§Ïö©Ï†ÅÏù∏ ÏÇ¨Ïö© ÏÇ¨Î°Ä
interface Product {
  id: number;
  name: string;
  price: number;
  category: string;
  inStock: boolean;
}

const products: Product[] = [
  { id: 1, name: "ÎÖ∏Ìä∏Î∂Å", price: 1000000, category: "Ï†ÑÏûêÏ†úÌíà", inStock: true },
  { id: 2, name: "ÎßàÏö∞Ïä§", price: 50000, category: "Ï†ÑÏûêÏ†úÌíà", inStock: true },
  { id: 3, name: "ÌÇ§Î≥¥Îìú", price: 80000, category: "Ï†ÑÏûêÏ†úÌíà", inStock: false },
  { id: 4, name: "Ï±ÖÏÉÅ", price: 200000, category: "Í∞ÄÍµ¨", inStock: true },
  { id: 5, name: "ÏùòÏûê", price: 150000, category: "Í∞ÄÍµ¨", inStock: true }
];

const filterInStock = (products: Product[]): Product[] => 
  products.filter(product => product.inStock);

const filterByCategory = (category: string) => (products: Product[]): Product[] => 
  products.filter(product => product.category === category);

const sortByPrice = (ascending: boolean = true) => (products: Product[]): Product[] => 
  [...products].sort((a, b) => ascending ? a.price - b.price : b.price - a.price);

const calculateTotalPrice = (products: Product[]): number => 
  products.reduce((total, product) => total + product.price, 0);

const formatCurrency = (amount: number): string => 
  `‚Ç©${amount.toLocaleString()}`;

console.log("=== Ïã§Ïö©Ï†ÅÏù∏ ÏÇ¨Ïö© ÏÇ¨Î°Ä (ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨) ===");

// Ïû¨Í≥†Í∞Ä ÏûàÎäî Ï†ÑÏûêÏ†úÌíàÏùÑ Í∞ÄÍ≤© ÏàúÏúºÎ°ú Ï†ïÎ†¨ÌïòÍ≥† Ï¥ù Í∞ÄÍ≤© Í≥ÑÏÇ∞
const electronicsTotal = pipe(
  products,
  filterInStock,                    // Ïû¨Í≥† ÏûàÎäî ÏÉÅÌíàÎßå
  filterByCategory("Ï†ÑÏûêÏ†úÌíà"),     // Ï†ÑÏûêÏ†úÌíàÎßå
  sortByPrice(true),               // Í∞ÄÍ≤© Ïò§Î¶ÑÏ∞®Ïàú Ï†ïÎ†¨
  calculateTotalPrice,             // Ï¥ù Í∞ÄÍ≤© Í≥ÑÏÇ∞
  formatCurrency                   // ÌÜµÌôî ÌòïÏãùÏúºÎ°ú Ìè¨Îß∑
);

console.log("Ïû¨Í≥†Í∞Ä ÏûàÎäî Ï†ÑÏûêÏ†úÌíà Ï¥ù Í∞ÄÍ≤©:", electronicsTotal);

// ComposeÎ°ú Í∞ôÏùÄ ÏûëÏóÖÏùÑ Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú Ïã§Ìñâ
const composedProductProcessing = compose(
  formatCurrency,                  // ÎßàÏßÄÎßâÏóê Ïã§Ìñâ
  calculateTotalPrice,             // Í∑∏ Îã§Ïùå
  sortByPrice(true),              // Í∑∏ Îã§Ïùå
  filterByCategory("Ï†ÑÏûêÏ†úÌíà"),    // Í∑∏ Îã§Ïùå
  filterInStock                    // Ï≤´ Î≤àÏß∏Î°ú Ïã§Ìñâ
);

const result6 = composedProductProcessing(products);
console.log("composeÎ°ú Ï≤òÎ¶¨Ìïú ÏÉÅÌíà Ï¥ù Í∞ÄÍ≤©:", result6);

export {
  pipe,
  compose,
  asyncPipe,
  add,
  multiply,
  subtract,
  divide,
  toUpperCase,
  addExclamation,
  addQuestion,
  reverse,
  isEven,
  square,
  double,
  filterActive,
  filterByAge,
  sortByName,
  mapToNames,
  addPrefix,
  safeDivide,
  safeSquare,
  withErrorHandling
};
